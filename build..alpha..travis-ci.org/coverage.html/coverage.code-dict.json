{"/home/travis/build/npmtest/node-npmtest-gulp-bower/test.js":"/* istanbul instrument in package npmtest_gulp_bower */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-bower/lib.npmtest_gulp_bower.js":"/* istanbul instrument in package npmtest_gulp_bower */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_gulp_bower = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_gulp_bower = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-bower/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-gulp-bower && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_gulp_bower */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_gulp_bower\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_gulp_bower.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_gulp_bower.rollup.js'] =\n            local.assetsDict['/assets.npmtest_gulp_bower.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_gulp_bower.__dirname +\n                    '/lib.npmtest_gulp_bower.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-bower/node_modules/gulp-bower/index.js":"/* global process */\nvar bower = require('bower');\nvar fs = require('fs');\nvar gutil = require('gulp-util');\nvar path = require('path');\nvar through = require('through2');\nvar walk = require('walk');\nvar inquirer = require('inquirer');\n\nvar toString = {}.toString,\n    enablePrompt,\n    cmd;\n\nvar PLUGIN_NAME = 'gulp-bower',\n    DEFAULT_VERBOSITY = 2,\n    DEFAULT_CMD = 'install',\n    DEFAULT_DIRECTORY = './bower_components',\n    DEFAULT_INTERACTIVE = false;\n\n/*\n * Verbosity levels:\n * 0: No output\n * 1: Error output\n * 2: All output\n */\nvar log = {\n    verbosity: DEFAULT_VERBOSITY,\n    info: function (s) {\n        if (this.verbosity > 1) {\n            log.output(s);\n        }\n    },\n    error: function (s) {\n        if (this.verbosity > 0) {\n            log.output(gutil.colors.red(s));\n        }\n    },\n    output: function (s) {\n        gutil.log(s);\n    }\n};\n\n/**\n * Gulp bower plugin\n *\n * @param {(object | string)} opts options object or directory string, see opts.directory\n * @param {string} opts.cmd bower command (default: install)\n * @param {string} opts.cwd current working directory (default: process.cwd())\n * @param {string} opts.directory bower components directory (default: .bowerrc config or 'bower_components')\n * @param {boolean} opts.interactive enable prompting from bower (default: false)\n * @param {number} opts.verbosity set logging level from 0 (no output) to 2 for info (default: 2)\n */\nfunction gulpBower(opts, cmdArguments) {\n    opts = parseOptions(opts);\n\n    log.info('Using cwd: ' + opts.cwd);\n    log.info('Using bower dir: ' + opts.directory);\n\n    cmdArguments = createCmdArguments(cmdArguments, opts);\n    var bowerCommand = getBowerCommand(cmd);\n\n    var stream = through.obj(function (file, enc, callback) {\n        this.push(file);\n        callback();\n    });\n\n    bowerCommand.apply(bower.commands, cmdArguments)\n        .on('log', function (result) {\n            log.info(['bower', gutil.colors.cyan(result.id), result.message].join(' '));\n        })\n        .on('prompt', function (prompts, callback) {\n            if (enablePrompt === true) {\n                inquirer.prompt(prompts, callback);\n            } else {\n                var error = 'Can\\'t resolve suitable dependency version.';\n                log.error(error);\n                log.error('Set option { interactive: true } to select.');\n                throw new gutil.PluginError(PLUGIN_NAME, error);\n            }\n        })\n        .on('error', function (error) {\n            stream.emit('error', new gutil.PluginError(PLUGIN_NAME, error));\n            stream.emit('end');\n        })\n        .on('end', function () {\n            writeStreamToFs(opts, stream);\n        });\n\n    return stream;\n}\n\n/**\n * Parse plugin options\n *\n * @param {object | string} opts options object or directory string\n */\nfunction parseOptions(opts) {\n    opts = opts || {};\n    if (toString.call(opts) === '[object String]') {\n        opts = {\n            directory: opts\n        };\n    }\n\n    opts.cwd = opts.cwd || process.cwd();\n\n    log.verbosity = toString.call(opts.verbosity) === '[object Number]' ? opts.verbosity : DEFAULT_VERBOSITY;\n    delete (opts.verbosity);\n\n    cmd = opts.cmd || DEFAULT_CMD;\n    delete (opts.cmd);\n\n    // enable bower prompting but ignore the actual prompt if interactive == false\n    enablePrompt = opts.interactive || DEFAULT_INTERACTIVE;\n    opts.interactive = true;\n\n    if (!opts.directory) {\n        opts.directory = getDirectoryFromBowerRc(opts.cwd) || DEFAULT_DIRECTORY;\n    }\n\n    return opts;\n}\n\n/**\n * Detect .bowerrc file and read directory from file\n *\n * @param {string} cwd current working directory\n * @returns {string} found directory or empty string\n */\nfunction getDirectoryFromBowerRc(cwd) {\n    var bowerrc = path.join(cwd, '.bowerrc');\n\n    if (!fs.existsSync(bowerrc)) {\n        return '';\n    }\n\n    var bower_config = {};\n    try {\n        bower_config = JSON.parse(fs.readFileSync(bowerrc));\n    } catch (err) {\n        return '';\n    }\n\n    return bower_config.directory;\n}\n\n/**\n * Create command arguments\n *\n * @param {any} cmdArguments\n * @param {object} opts options object\n */\nfunction createCmdArguments(cmdArguments, opts) {\n    if (toString.call(cmdArguments) !== '[object Array]') {\n        cmdArguments = [];\n    }\n    if (toString.call(cmdArguments[0]) !== '[object Array]') {\n        cmdArguments[0] = [];\n    }\n    cmdArguments[1] = cmdArguments[1] || {};\n    cmdArguments[2] = opts;\n\n    return cmdArguments;\n}\n\n/**\n * Get bower command instance\n *\n * @param {string} cmd bower commands, e.g. 'install' | 'update' | 'cache clean' etc.\n * @returns {object} bower instance initialised with commands\n */\nfunction getBowerCommand(cmd) {\n    // bower has some commands that are provided in a nested object structure, e.g. `bower cache clean`.\n    var bowerCommand;\n\n    // clean up the command given, to avoid unnecessary errors\n    cmd = cmd.trim();\n\n    var nestedCommand = cmd.split(' ');\n\n    if (nestedCommand.length > 1) {\n        // To enable that kind of nested commands, we try to resolve those commands, before passing them to bower.\n        for (var commandPos = 0; commandPos < nestedCommand.length; commandPos++) {\n            if (bowerCommand) {\n                // when the root command is already there, walk into the depth.\n                bowerCommand = bowerCommand[nestedCommand[commandPos]];\n            } else {\n                // the first time we look for the \"root\" commands available in bower\n                bowerCommand = bower.commands[nestedCommand[commandPos]];\n            }\n        }\n    } else {\n        // if the command isn't nested, just go ahead as usual\n        bowerCommand = bower.commands[cmd];\n    }\n\n    // try to give a good error description to the user when a bad command was passed\n    if (bowerCommand === undefined) {\n        throw new gutil.PluginError(PLUGIN_NAME, 'The command \\'' + cmd + '\\' is not available in the bower commands');\n    }\n\n    return bowerCommand;\n}\n\n/**\n * Write stream to filesystem\n * \n * @param {object} opts options object\n * @param {object} stream file stream\n */\nfunction writeStreamToFs(opts, stream) {\n    var baseDir = path.join(opts.cwd, opts.directory);\n    var walker = walk.walk(baseDir);\n\n    walker.on('errors', function (root, stats, next) {\n        stream.emit('error', new gutil.PluginError(PLUGIN_NAME, stats.error));\n        next();\n    });\n    walker.on('directory', function (root, stats, next) {\n        next();\n    });\n\n    walker.on('file', function (root, stats, next) {\n        var filePath = path.resolve(root, stats.name);\n\n        fs.readFile(filePath, function (error, data) {\n            if (error) {\n                stream.emit('error', new gutil.PluginError(PLUGIN_NAME, error));\n            } else {\n                stream.write(new gutil.File({\n                    path: path.relative(baseDir, filePath),\n                    contents: data\n                }));\n            }\n\n            next();\n        });\n    });\n\n    walker.on('end', function () {\n        stream.emit('end');\n    });\n}\n\nmodule.exports = gulpBower;\n","/home/travis/build/npmtest/node-npmtest-gulp-bower/node_modules/gulp-bower/gulpfile.js":"/* jshint node:true */\n'use strict';\n\nvar gulp = require('gulp');\nvar jshint = require('gulp-jshint');\nvar mocha = require('gulp-mocha');\nvar istanbul = require('gulp-istanbul');\nvar codecov = require('gulp-codecov.io');\n\ngulp.task('lint', function () {\n    return gulp.src(['index.js', 'tests/test.js'])\n        .pipe(jshint())\n        .pipe(jshint.reporter('default'))\n});\n\ngulp.task('coverage-setup', function () {\n    return gulp.src('index.js')\n        .pipe(istanbul())\n        .pipe(istanbul.hookRequire());\n});\n\ngulp.task('test', ['coverage-setup'], function () {\n    return gulp.src('tests/test.js', { read: false })\n        .pipe(mocha({ reporter: 'spec', timeout: 15000 }))\n        .pipe(istanbul.writeReports());\n});\n\ngulp.task('post-coverage', ['test'], function () {\n    return gulp.src('./coverage/lcov.info')\n        .pipe(codecov());\n});\n\ngulp.task('watch-test', function () {\n    gulp.watch(['index.js', 'tests/test.js'], ['test']);\n});\n\ngulp.task('default', ['lint']);\n"}